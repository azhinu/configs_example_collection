version: '3.6'

services:
  app:
    image: rocketchat/rocket.chat
    command: >
      bash -c
        "for i in `seq 1 30`; do
          node main.js &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    environment:
      PORT: 3000
      ROOT_URL: https://chat.example.com
      MONGO_URL: mongodb://mongo:27017/rocketchat
      MONGO_OPLOG_URL: mongodb://mongo:27017/local
      MAIL_URL: smtp://smtp.email
    volumes:
      - uploads:/app/uploads
    networks:
      - rocketchat_net
      - proxy
    depends_on:
      - mongo
    restart: unless-stopped


  mongo:
    image: mongo:4.0
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1
    volumes:
     - db_data:/data/db
    networks:
      - rocketchat_net
    restart: unless-stopped


  # this container's job is just run the command to initialize the replica set.
  # it will run the command and remove himself (it will not stay running)
  mongo-init-replica:
    image: mongo:4.0
    command: >
      bash -c
        "for i in `seq 1 30`; do
          mongo mongo/rocketchat --eval \"
            rs.initiate({
              _id: 'rs0',
              members: [ { _id: 0, host: 'localhost:27017' } ]})\" &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    depends_on:
      - mongo
    networks:
      - rocketchat_net

  # hubot, the popular chatbot (add the bot user first and change the password before starting this image)

networks:
  rocketchat_net:
  proxy:
    external: true

volumes:
  uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/rocket.chat/uploads

  db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/rocket.chat/db_data

  scripts:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/rocket.chat/scripts
